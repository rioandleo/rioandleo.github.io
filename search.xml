<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[pipenv快速入门]]></title>
    <url>%2F2019%2F09%2F02%2Fpipenv%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[学过Python的同学应该都了解pip这个工具，我们用pip绝大部分的第三方库都可以用pip来安装，用起来很方便。但是如果我们要把项目部署到服务器上面的话，就稍微有些麻烦了，因为还需要在服务器上用pip安装这些包，假如项目中用到很多包的话，一个个安装会很麻烦，而且没有通用性。Java上的maven、gradle，NodeJS的npm这些工具就不存在这个问题，它们有一个或多个的专门的依赖文件来管理这些包。pipenv就是这样一个类似的工具，可以帮助我们管理Python和第三方库的版本。 安装安装pipenv很简单，用pip命令就可以安装。 1pip install pipenv 将来需要更新pipenv的时候，运行： 1pip install --user --upgrade pipenv 首次运行如果是第一次在项目中运行pipenv命令的话，会在项目中创建一个名为Pipfile的文件，文件内容类似下面这样。用过maven、gradle等工具的同学对此应该熟悉，相信不用我解释其中的含义。 123456789101112[[source]]url = "https://pypi.org/simple"verify_ssl = truename = "pypi"[packages]requests-html = "*"[dev-packages][requires]python_version = "3.7" 如果运行过install、update等命令的话，还会创建一个Pipfile.lock文件，类似npm中的lock文件。这两个文件就是pipenv用于管理第三方库的配置文件，如果同时使用版本控制软件的话，需要将它们也加入进去。 常用命令安装例如，我想在项目中安装requests这个包，运行： 1pipenv install requests 如果需要指定具体版本号，可以这样： 1pipenv install requests==2.13.0 如果是第一次运行pipenv的话，会先创建Pipfile文件，否则会修改Pipfile`文件。 该命令还有一个常用参数-d或--dev，用于安装仅供开发使用的包。 卸载相应的还有命令来卸载第三方包，该命令还有两个参数--all和--all-dev用于卸载所有包和所有开发包。 1pipenv uninstall requests 更新查看所有需要更新的包： 1pipenv update --outdated 更新所有包： 1pipenv update 更新指定的包： 1pipenv update &lt;包名&gt; 从requirements.txt导入如果项目中有requirements.txt文件，pipenv会在安装的时候自动导入。如果需要导入其他位置的requirements.txt，可以用下面的命令： 1pipenv install -r path/to/requirements.txt 指定Python版本pipenv会创建虚拟Python环境，并在其中用pip安装所有包。如果要指定Python版本，可以用下面的命令，三种版本号都支持： 123pipenv --python 3pipenv --python 3.6pipenv --python 2.7.14 如果不指定版本号，pipenv会使用系统默认的Python版本。需要注意，这里指定的Python必须是系统已经安装的、可以在环境变量中搜索到的版本号，如果指定未安装的版本，会提示错误。 运行命令用下面的命令可以启动一个在虚拟环境中的shell： 1pipenv shell 如果不想启动shell，而是直接在虚拟环境中执行命令，可以使用run： 1pipenv run python --version 高级用法一开始我文档没看全，然后用pipenv的时候发现有一些问题，后来我发现官方文档还有一部分高级内容也很重要，所以再来补充一下。当然如果有需要的话还是得看原文。 导出requirements.txt用下面的命令就可以将Pipfile和Pipfile.lock文件里面的包导出为requirements.txt文件。 1pipenv lock -r 如果只想导出开发用的包，可以添加--dev参数： 1pipenv lock -r --dev 自动安装Pythonpipenv只能搜索系统中已经安装的Python版本，对于未安装的版本，会提示错误。但是如果你同时安装了pyenv的话，pipenv会自动发现pyenv，然后直接询问你是否要安装。这样一来，原来的工作流程是：用pyenv安装某个Python-&gt;用virtualenv或venv创建虚拟环境-&gt;用pip从requirements.txt中安装包-&gt;将来可能还要更新包。现在完全可以用pipenv一两条命令解决，真的是非常方便。 自动加载.env文件.env文件可以设置一些环境变量，在程序开发的时候模拟环境变量。pipenv也可以自动加载.env文件。 1234567891011$ cat .envHELLO=WORLD⏎$ pipenv run pythonLoading .env environment variables…Python 2.7.13 (default, Jul 18 2017, 09:17:00)[GCC 4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import os&gt;&gt;&gt; os.environ['HELLO']'WORLD' 环境变量支持在Pipfile中也可以引用环境变量的值，格式为${MY_ENVAR}或$MY_ENVAR，在Windows系统中还支持%MY_ENVAR%。 1234567891011[[source]]url = "https://$&#123;PYPI_USERNAME&#125;:$&#123;PYPI_PASSWORD&#125;@my_private_repo.example.com/simple"verify_ssl = truename = "pypi"[dev-packages][packages]requests = &#123;version="*", index="home"&#125;maya = &#123;version="*", index="pypi"&#125;records = "*" 自定义虚拟环境路径很多工具遵循Linux开发习惯，将东西全存在用户目录中，在Linux中可能没啥，但是在Windows下可能有人不喜欢把这些东西放在用户目录。当然pipenv也可以自定义，只需要设置或修改WORKON_HOME环境变量的值即可。 如果设置了PIPENV_VENV_IN_PROJECT环境变量，pipenv会把虚拟环境放在项目目录的.venv目录下。 配置pipenvpipenv还有一些配置，都是使用环境变量配置的，由于配置项比较多，这里就不介绍了，直接看官方文档好了。 从setup.py安装pipenv也可以从setup.py安装： 1pipenv install -e . 那么为什么不全用pipenv来安装呢？官方文档这里为我们做出了解释：项目可以分为两种，程序和库，对于程序来说应该使用pipenv，而对于库来说则是在setup.py中安装。详细解释说实话我没太看懂，大意就是抽象依赖和具体依赖，还有一个责任分配的问题，原文在这里。]]></content>
      <categories>
        <category>python环境</category>
      </categories>
      <tags>
        <tag>pipenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[virtualenv基本用法]]></title>
    <url>%2F2019%2F09%2F02%2Fvirtualenv%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-1%2F</url>
    <content type="text"><![CDATA[virtualenv基本用法在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。 如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？ 这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。 首先，我们用pip安装virtualenv： 1pip3 install virtualenv 然后，假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做： 第一步，创建目录：123Mac:~ michael$ mkdir myprojectMac:~ michael$ cd myproject/Mac:myproject michael$ 第二步，创建一个独立的Python运行环境，命名为venv：12345Mac:myproject michael$ virtualenv --no-site-packages venvUsing base prefix '/usr/local/.../Python.framework/Versions/3.4'New python executable in venv/bin/python3.4Also creating executable in venv/bin/pythonInstalling setuptools, pip, wheel...done. 命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数--no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。 新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境： 12Mac:myproject michael$ source venv/bin/activate(venv)Mac:myproject michael$ 注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。 下面正常安装各种第三方包，并运行python命令： 12345(venv)Mac:myproject michael$ pip install jinja2...Successfully installed jinja2-2.7.3 markupsafe-0.23(venv)Mac:myproject michael$ python myapp.py... 在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。 退出当前的venv环境，使用deactivate命令： 12(venv)Mac:myproject michael$ deactivate Mac:myproject michael$ 此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。 完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。 virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。]]></content>
      <categories>
        <category>python环境</category>
      </categories>
      <tags>
        <tag>virtualenv</tag>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda虚拟环境操作]]></title>
    <url>%2F2019%2F09%2F01%2Fconda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[conda虚拟环境操作 conda env list 或 conda info -e 查看当前存在哪些虚拟环境 conda update conda 检查更新当前conda conda update --all 更新本地已安装的包 conda create -n your_env_name python=X.X anaconda 命令创建python版本为X.X、名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。 Windows: activate your_env_name(虚拟环境名称) 激活虚拟环境 conda install -n your_env_name [package] 安装package到your_env_name中 linux: source deactivateWindows: deactivate 关闭虚拟环境 conda remove -n your_env_name(虚拟环境名称) --all 删除虚拟环境 conda remove --name your_env_name package_name 删除环境中的某个包]]></content>
      <categories>
        <category>python环境</category>
      </categories>
      <tags>
        <tag>conda</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[孩子长高黄金期]]></title>
    <url>%2F2019%2F09%2F01%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[孩子长高黄金期 3-7月正是一年之中孩子长个速度最快的时期。人体新陈代谢旺盛，内分泌激素尤其是生长激素分泌增多，有利于孩子生长。 春季回暖的气温、充足的光照、多样的食材，均有助于对孩子进行科学喂养 如何把握春季长个黄金期1.膳食营养均衡膳食营养是儿童体格生长的物质基础，营养摄入的均衡与否对于儿童的身高有着直接的影响，比如： ✿ 钙：是维持骨骼健康的重要成分，在儿童青少年时期尽早补充足量的钙，对于儿童的身高发育及成年期的骨质健康都有一定的好处。 ✿ 维生素D：可以调节钙磷代谢，促进钙的吸收和骨化。儿童缺乏维生素D时可导致佝偻病的发生。 ✿ 锌：是维持人体正常生长发育和组织再生的重要物质，锌缺乏会导致儿童生长发育迟缓或停滞。 想让孩子长高，特别需要保证钙、维生素D和锌的充足摄入喔* 随着气温的回升，各种新鲜蔬菜水果也开始大量上市，妈妈们在选购食材时可适当多选择一些时令食材尝鲜，比如香椿。 2.帮孩子建立良好的饮食习惯比如三餐规律、不偏食挑食、选择健康零食。对于提高孩子进食质量、预防营养过剩或营养缺乏等等都有益处。 3.鼓励孩子多运动运动不仅有助于儿童控制体重，还能促进皮肤合成维生素D，增进钙的吸收，加速骨骼生长，同时还能刺激食欲，有助于孩子进食。 所以要督促孩子每天至少1小时中等至高强度户外运动，比如踢足球、跑步、打篮球等等；每周2-3次抗阻力运动，比如哑铃、沙袋等等。 4. 保证每天至少8小时的高质量睡眠生长激素可以促进机体的合成代谢，有助于骨骼细胞的增殖，加速骨与软骨的生长，可以说生长激素是让孩子长高高的重要因素。 而有分析认为，生长激素的分泌与睡眠有关。生长激素会集中在夜晚入睡后的时间分泌，且入睡后1-2个小时分泌开始显著增高，因而保证充足且高质量的夜间睡眠一定程度上可促进长高喔。]]></content>
      <categories>
        <category>健康</category>
      </categories>
      <tags>
        <tag>健康</tag>
        <tag>小孩</tag>
      </tags>
  </entry>
</search>
